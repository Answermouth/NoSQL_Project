MATCH (n)
DETACH DELETE n

CALL apoc.load.json("file:///C:/Users/Ansel/Desktop/NoSQL/projet/sample_domains.json") YIELD value AS protein
CREATE (p:Protein {proteinId: protein.code, domains: protein.domains});

CALL apoc.load.json("file:///Users/sakina/Desktop/NoSQL_Project/Clean_Data.json") YIELD value AS protein
CREATE (p:Protein {proteinId: protein.code, domains: protein.domains, labels: protein.EC_numbers, goTerms: protein.GO_terms, entryName: protein.Entry_name, proteinName: protein.Protein_names, geneName: protein.Gene_names });

linking proteins to their domains

MATCH (p1:Protein)
UNWIND p1.domains as d1
MERGE (d:Domain {domain: d1})<-[:IN]-(p:Protein {proteinId: p1.proteinId});


MATCH p=(p1:Protein)-[r:IN]->()
WHERE p1.proteinId = 'P31748'
RETURN p LIMIT 25;

MATCH (n)
DETACH DELETE n;

CALL apoc.load.json("file:///C:/Users/Ansel/Desktop/NoSQL/projet/sample_labels_domains.json") YIELD value AS protein
MERGE (p:Protein {proteinId: protein.code})
WITH protein, p
UNWIND protein.domains as domain
MERGE (d:Domain {domain: domain})
MERGE (p)-[:IN]->(d)


____
MATCH (p1:Protein)-[:IN]->(d1:Domain)
WITH p1, collect(ID(d1)) AS ids
SET p1.domainsIDs = ids

MATCH (p1:Protein {proteinId:"Q306W8"}), (p2:Protein {proteinId:"Q9WC28"})
RETURN p1, p2, algo.similarity.jaccard(p1.domainsIDs, p2.domainsIDs) LIMIT 10

MATCH (p1:Protein), (p2:Protein)
WHERE p1 <> p2
RETURN p1, p2, algo.similarity.jaccard(p1.domainsIDs, p2.domainsIDs) LIMIT 100


MATCH (p1:Protein), (p2:Protein)
WHERE p1 <> p2
AND algo.similarity.jaccard(p1.domainsIDs, p2.domainsIDs)>0
MERGE (p1)<-[:DOMAIN_LINK {similarity: algo.similarity.jaccard(p1.domainsIDs, p2.domainsIDs)}]->(p2); // very slow

_____
add label list to protein node at import

MATCH p=()-[r:DOMAIN_LINK]->()
WHERE r.distance >= 0.8
RETURN p LIMIT 500

with [1,2,3] as a1
, [3,4,5] as a2
with a1 + a2 as all
unwind all as a
return collect(distinct a) as unique;


OPTIONAL MATCH path = ()-[sim:DOMAIN_LINK]->() WHERE sim.distance >= 0.8
WITH apoc.coll.toSet([n in nodes(path) WHERE n is not null
     | { id: id(n),label: labels(n),type:"",metadata: properties(n)  } ]) as nodes,

     apoc.coll.toSet([r in relationships(path) WHERE r is not null
     | { id: id(r),source: id(startNode(r)),relation: type(r),target: id(endNode(r)), directed: "false"  } ]) as rels

RETURN { graph: { type:"",label: "",directed: "false",nodes: nodes,edges: rels,
         metadata:{ countNodes: size(nodes),countEdges: size(rels) } } } as graph;


MATCH path = (a)-[r:DOMAIN_LINK]->(b) WHERE r.distance >= 0.8
WITH collect (
    {
        source: ID(a),
        target: ID(b),
        caption: r.distance
    }
) AS edges
RETURN edges;


MATCH path = (a)-[r:DOMAIN_LINK]->(b) WHERE r.distance >= 0.8
WITH collect(
	{
    	id: ID(a),
        caption: a.proteinId,
        domains: a.domainsIDs,
        labels: a.labels
    }
) AS nodes,
collect (
    {
        source: ID(a),
        target: ID(b),
        caption: r.distance
    }
) AS edges
RETURN {nodes:nodes, edges:edges}; // Way to slow